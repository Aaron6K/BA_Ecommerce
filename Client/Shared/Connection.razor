@inject IJSRuntime _jsRuntime;
@implements IAsyncDisposable

@if (IsOnline)
{
   @Online
}
else
{
   @Offline
}

@code {

   [Parameter]
   public RenderFragment Online { get; set; }

   [Parameter]
   public RenderFragment Offline { get; set; }

   public bool IsOnline { get; set; }

   [JSInvokable("Connection.StatusChanged")]
   public void OnConnectionStatusChanged(bool isOnline)
   {
      if (IsOnline != isOnline)
      {
         IsOnline = isOnline;
      }

      StateHasChanged();
   }

   protected override async Task OnInitializedAsync()
   {
      await base.OnInitializedAsync();

      await _jsRuntime.InvokeVoidAsync("Connection.Initialize", DotNetObjectReference.Create(this));
   }

   public async ValueTask DisposeAsync()
   {
      await _jsRuntime.InvokeVoidAsync("Connection.Dispose");
   }

}

@*

https://www.patrickrobin.co.uk/articles/showing-connection-status-in-blazor-webassembly/
https://www.neptuo.com/blog/2019/12/blazor-network-status/
https://code-maze.com/use-browser-functionalities-with-blazor-webassembly/

*@